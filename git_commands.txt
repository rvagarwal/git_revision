git config
Usage: git config –global user.name “[name]”  

Usage: git config –global user.email “[email address]”

git init
Usage: git init [repository name]


git clone
Usage: git clone [url]  


git add
Usage: git add [file]  

This command adds a file to the staging area.


git commit
Usage: git commit -m “[ Type in the commit message]”

git diff
Usage: git diff  

This command shows the file differences which are not yet staged.  


git reset
Usage: git reset [file]  

This command unstages the file, but it preserves the file contents.


git status
Usage: git status  

This command lists all the files that have to be committed.


git rm
Usage: git rm [file]  

This command deletes the file from your working directory and stages the deletion.


git log
Usage: git log  

This command is used to list the version history for the current branch.


git show
Usage: git show [commit]  

This command shows the metadata and content changes of the specified commit.


git tag
Usage: git tag [commitID]  

This command is used to give tags to the specified commit.

git branch
Usage: git branch  

This command lists all the local branches in the current repository.


git checkout
Usage: git checkout [branch name]  

This command is used to switch from one branch to another.
Usage: git checkout -b [branch name] 


git merge
Usage: git merge [branch name]  

This command merges the specified branch’s history into the current branch.

git push
Usage: git push [variable name] master  

This command sends the committed changes of master branch to your remote repository.


git pull
Usage: git pull [Repository Link]  

This command fetches and merges changes on the remote server to your working directory.


git rebase [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase>]
	[<upstream> [<branch>]]

If <branch> is specified, git rebase will perform an automatic git checkout <branch> before doing anything else. Otherwise it remains on the current branch.


git-stash
Use git stash when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit.
git stash list [<options>]
git stash show [<stash>]
git stash drop [-q|--quiet] [<stash>]
git stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]
git stash branch <branchname> [<stash>]
git stash [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]
	     [-u|--include-untracked] [-a|--all] [-m|--message <message>]
	     [--] [<pathspec>…​]]
git stash clear
git stash create [<message>]
git stash store [-m|--message <message>] [-q|--quiet] <commit>
